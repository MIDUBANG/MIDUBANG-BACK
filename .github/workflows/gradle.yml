# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:

    runs-on: ubuntu-latest
    env :
      working-directory: ./
      APPLICATION: ${{ secrets.APPLICATION_SECRET_YML }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: make application-secret.yml
      env: 
        MIDUBANG_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        MIDUBANG_SECRET_DIR: src/main/resources
        MIDUBANG_SECRET_DIR_FILE_NAME: application-secret.yml
      run: echo $MIDUBANG_SECRET | base64 --decode > $MIDUBANG_SECRET_DIR/$MIDUBANG_SECRET_DIR_FILE_NAME
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew bootJar

      
    - name: Cleanup Gradle Cache
      if: ${{ always() }}
      run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/midubang-spring:latest
        
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
       host: ${{ secrets.EC2_SERVER_HOST }}
       username: ubuntu
       key: ${{ secrets.PRIVATE_KEY }}
       envs: GITHUB_SHA
       script: |
            docker stop spring-con && docker rm spring-con
            docker rmi -f gayeongpark/midubang-spring
            docker pull gayeongpark/midubang-spring
            docker run -d --name spring-con -p 8080:8080 --restart always gayeongpark/midubang-spring
          
          

